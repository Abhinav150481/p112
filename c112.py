# -*- coding: utf-8 -*-
"""c112

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B8nrX1yldaapgx5FtuwilGCdgoHzX70M
"""

from google.colab import files 
data_to_load=files.upload()



import plotly.express as px
import statistics
import csv
import pandas as pd
df=pd.read_csv("data1.csv")
fig=px.scatter(df,y="quant_saved", color="rem_any")
fig.show()

import csv
with open('data1.csv',newline="")as f:
  reader=csv.reader(f)
  savings_data=list(reader)
savings_data.pop(0)
total_entries=len(savings_data)
total_people_given_reminder=0
for data in savings_data:
  if int(data[3])==1:
    total_people_given_reminder+=1
import plotly.graph_objects as go
fig=go.Figure(go.Bar(x=["Reminded","Notreminded"],y=[total_people_given_reminder,(total_entries-total_people_given_reminder)]))
fig.show()

all_savings=[]
for data in savings_data:
  all_savings.append(float(data[0]))
print(f"mean of savings - {statistics.mean(all_savings)}")
print(f"median of savings - {statistics.median(all_savings)}")
print(f"mode of savings - {statistics.mode(all_savings)}")

reminded_savings=[]
nreminded_savings=[]
for data in savings_data:
  if int(data[3])==1:
    reminded_savings.append(float (data[0]))
  else:
    nreminded_savings.append(float(data[0]))
print(f"mean of savings - {statistics.mean(reminded_savings)}")
print(f"median of savings - {statistics.median(reminded_savings)}")
print(f"mode of savings - {statistics.mode(reminded_savings)}")
print("\n\n")
print("results for people who were not reminded to save ")
print(f"mean of savings - {statistics.mean(nreminded_savings)}")
print(f"median of savings - {statistics.median(nreminded_savings)}")
print(f"mode of savings - {statistics.mode(nreminded_savings)}")

print(f"stdev of all the data= {statistics.stdev(all_savings)}")
print(f"stdev of people who were reminded= {statistics.stdev(reminded_savings)}")
print(f"stdev of people who were nreminded= {statistics.stdev(nreminded_savings)}")

import numpy as np
age=[]
saving=[]
for data in savings_data:
  if float(data[5])!=0:
    age.append(float(data[5]))
    saving.append(float(data[0]))
coorelation=np.corrcoef(age,saving)
print(f"coorelation the age of the person and their saving is= {coorelation[0,1]}")

import plotly.figure_factory as ff
fig=ff.create_distplot([df["quant_saved"].tolist()],["Savings"],show_hist = False)
fig.show()

import seaborn as sns
sns.boxplot(data=df,x=df["quant_saved"])

q1=df["quant_saved"].quantile(0.25)
q3=df["quant_saved"].quantile(0.75)
iqr=q3-q1
print(f"Q1-{q1}")
print(f"Q3-{q3}")
print(f"IQR-{iqr}")
lower_whisker=q1-1.5*iqr
upper_whisker=q3+1.5*iqr
print(f"lower whisker-{lower_whisker}")
print(f"upper whisker-{upper_whisker}")
new_df=df[df["quant_saved"]<upper_whisker]

all_savings=new_df["quant_saved"].tolist()
print(f"mean of savings - {statistics.mean(all_savings)}")
print(f"median of savings - {statistics.median(all_savings)}")
print(f"mode of savings - {statistics.mode(all_savings)}")
print(f"stdev of all the data= {statistics.stdev(all_savings)}")
fig=ff.create_distplot([new_df["quant_saved"].tolist()],["Savings"],show_hist = False)
fig.show()

import random
sampling_mean_list=[]
for i in range(1000):
  temp_list=[]
  for j in range(100):
    temp_list.append(random.choice(all_savings))
  sampling_mean_list.append(statistics.mean(temp_list))
mean_sampling=statistics.mean(sampling_mean_list)
fig=ff.create_distplot([sampling_mean_list],["Savings(Sampling)"],show_hist = False)
fig.add_trace(go.Scatter(x=[mean_sampling,mean_sampling],y=[0,0.1],mode="lines",name="MEAN"))
fig.show()

print(f"stdev of SD - {statistics.stdev(sampling_mean_list)}")

print(f"mean of population- {statistics.mean(all_savings)}")
print(f"mean of sampling d- {mean_sampling}")

temp_df=new_df[new_df.age!=0]
age=temp_df["age"].tolist()
savings=temp_df["quant_saved"].tolist()
correlation=np.corrcoef(age,savings)
print(f"coorelation btw age and saving - {correlation[0,1]}")

reminded_df = new_df.loc[new_df["rem_any"] == 1]
not_reminded_df = new_df.loc[new_df["rem_any"] == 0]

print(reminded_df.head())
print(not_reminded_df.head())

fig = ff.create_distplot([not_reminded_df["quant_saved"].tolist()], ["Savings (Not Reminded)"], show_hist=False)
fig.show()

not_reminded_savings = not_reminded_df["quant_saved"].tolist()

sampling_mean_list_not_reminded = []
for i in range(1000):
  temp_list = []
  for j in range(100):
    temp_list.append(random.choice(not_reminded_savings))
  sampling_mean_list_not_reminded.append(statistics.mean(temp_list))

mean_sampling_not_reminded = statistics.mean(sampling_mean_list_not_reminded)
stdev_sampling_not_reminded = statistics.stdev(sampling_mean_list_not_reminded)

print(f"Mean of Sampling (Not Reminded) -> {mean_sampling_not_reminded}")
print(f"Standard Deviation of Sampling (Not Reminded) -> {stdev_sampling_not_reminded}")
fig = ff.create_distplot([sampling_mean_list_not_reminded], ["Savings (Sampling)"], show_hist=False)
fig.add_trace(go.Scatter(x=[mean_sampling, mean_sampling], y=[0, 0.1], mode="lines", name="MEAN"))
fig.show()

first_std_deviation_start = mean_sampling_not_reminded-stdev_sampling_not_reminded
first_std_deviation_end = mean_sampling_not_reminded+stdev_sampling_not_reminded
print(f"First (start) - {first_std_deviation_start} and First (end) - {first_std_deviation_end}")

second_std_deviation_start = mean_sampling_not_reminded-(2*stdev_sampling_not_reminded)
second_std_deviation_end = mean_sampling_not_reminded+(2*stdev_sampling_not_reminded)
print(f"Second (start) - {second_std_deviation_start} and Second (end) - {second_std_deviation_end}")

third_std_deviation_start = mean_sampling_not_reminded-(3*stdev_sampling_not_reminded)
third_std_deviation_end = mean_sampling_not_reminded+(3*stdev_sampling_not_reminded)
print(f"Third (start) - {third_std_deviation_start} and Third (end) - {third_std_deviation_end}")

reminded_savings = reminded_df["quant_saved"].tolist()

sampling_mean_list_reminded = []
for i in range(1000):
  temp_list = []
  for j in range(100):
    temp_list.append(random.choice(reminded_savings))
  sampling_mean_list_reminded.append(statistics.mean(temp_list))

mean_sampling_reminded = statistics.mean(sampling_mean_list_reminded)
stdev_sampling_reminded = statistics.stdev(sampling_mean_list_reminded)

print(f"Mean of Sampling (Reminded) -> {mean_sampling_reminded}")
print(f"Standard Deviation of Sampling (Reminded) -> {stdev_sampling_reminded}")
fig = ff.create_distplot([sampling_mean_list_reminded], ["Savings (Sampling)"], show_hist=False)
fig.add_trace(go.Scatter(x=[mean_sampling, mean_sampling], y=[0, 0.1], mode="lines", name="MEAN"))
fig.show()

z_score = (mean_sampling_reminded - mean_sampling_not_reminded) / stdev_sampling_not_reminded
print(f"Z-Score is - {z_score}")